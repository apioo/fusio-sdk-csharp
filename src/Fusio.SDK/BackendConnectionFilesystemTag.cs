/**
 * BackendConnectionFilesystemTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */


using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using RestSharp;
using Sdkgen.Client;
using Sdkgen.Client.Exception;

namespace Fusio.SDK;

public class BackendConnectionFilesystemTag : TagAbstract {
    public BackendConnectionFilesystemTag(RestClient httpClient, Parser parser): base(httpClient, parser)
    {
    }


    /**
     * Uploads one or more files on the filesystem connection
     */
    public async Task<CommonMessage> Create(string connectionId, Sdkgen.Client.Multipart payload)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("connection_id", connectionId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/backend/connection/:connection_id/filesystem", pathParams), Method.Post);
        this.Parser.Query(request, queryParams, queryStructNames);
        foreach(KeyValuePair<string, Multipart.Part> part in payload.GetParts())
        {
            if (part.Value.Path != null)
            {
                request.AddFile(part.Key, part.Value.Path, part.Value.ContentType, part.Value.Options);
            }
            else if (part.Value.Bytes != null)
            {
                request.AddFile(part.Key, part.Value.Bytes, part.Value.FileName, part.Value.ContentType, part.Value.Options);
            }
            else if (part.Value.GetFile != null)
            {
                request.AddFile(part.Key, part.Value.GetFile, part.Value.FileName, part.Value.ContentType, part.Value.Options);
            }
        }


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            throw new CommonMessageException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Deletes an existing file on the filesystem connection
     */
    public async Task<CommonMessage> Delete(string connectionId, string fileId)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("connection_id", connectionId);
        pathParams.Add("file_id", fileId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/backend/connection/:connection_id/filesystem/:file_id", pathParams), Method.Delete);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            throw new CommonMessageException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Returns the content of the provided file id on the filesystem connection
     */
    public async void Get(string connectionId, string fileId)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("connection_id", connectionId);
        pathParams.Add("file_id", fileId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/backend/connection/:connection_id/filesystem/:file_id", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            return;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            throw new CommonMessageException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Returns all available files on the filesystem connection
     */
    public async Task<BackendFileCollection> GetAll(string connectionId, int startIndex, int count)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("connection_id", connectionId);

        Dictionary<string, object> queryParams = new();
        queryParams.Add("startIndex", startIndex);
        queryParams.Add("count", count);

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/backend/connection/:connection_id/filesystem", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<BackendFileCollection>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            throw new CommonMessageException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Updates an existing file on the filesystem connection
     */
    public async Task<CommonMessage> Update(string connectionId, string fileId, Sdkgen.Client.Multipart payload)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("connection_id", connectionId);
        pathParams.Add("file_id", fileId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/backend/connection/:connection_id/filesystem/:file_id", pathParams), Method.Put);
        this.Parser.Query(request, queryParams, queryStructNames);
        foreach(KeyValuePair<string, Multipart.Part> part in payload.GetParts())
        {
            if (part.Value.Path != null)
            {
                request.AddFile(part.Key, part.Value.Path, part.Value.ContentType, part.Value.Options);
            }
            else if (part.Value.Bytes != null)
            {
                request.AddFile(part.Key, part.Value.Bytes, part.Value.FileName, part.Value.ContentType, part.Value.Options);
            }
            else if (part.Value.GetFile != null)
            {
                request.AddFile(part.Key, part.Value.GetFile, part.Value.FileName, part.Value.ContentType, part.Value.Options);
            }
        }


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            throw new CommonMessageException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }


}

/**
 * BackendMarketplaceAppTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */


using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using RestSharp;
using Sdkgen.Client;
using Sdkgen.Client.Exception;

namespace Fusio.SDK;

public class BackendMarketplaceAppTag : TagAbstract {
    public BackendMarketplaceAppTag(RestClient httpClient, Parser parser): base(httpClient, parser)
    {
    }


    public async Task<MarketplaceMessage> Upgrade(string user, string name)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("user", user);
        pathParams.Add("name", name);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/backend/marketplace/app/:user/:name", pathParams), Method.Put);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 400)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        if (statusCode == 401)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        if (statusCode == 404)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        if (statusCode == 410)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        if (statusCode == 500)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    public async Task<MarketplaceApp> Get(string user, string name)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("user", user);
        pathParams.Add("name", name);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/backend/marketplace/app/:user/:name", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<MarketplaceApp>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 401)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        if (statusCode == 404)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        if (statusCode == 410)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        if (statusCode == 500)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    public async Task<MarketplaceMessage> Install(MarketplaceInstall payload)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/backend/marketplace/app", pathParams), Method.Post);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddJsonBody(JsonSerializer.Serialize(payload));

        request.AddOrUpdateHeader("Content-Type", "application/json");

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 400)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        if (statusCode == 401)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        if (statusCode == 500)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    public async Task<MarketplaceAppCollection> GetAll(int startIndex, string query)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();
        queryParams.Add("startIndex", startIndex);
        queryParams.Add("query", query);

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/backend/marketplace/app", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<MarketplaceAppCollection>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 401)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        if (statusCode == 500)
        {
            var data = this.Parser.Parse<MarketplaceMessage>(response.Content);

            throw new MarketplaceMessageException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }


}

/**
 * ConsumerIdentityTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */


using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using RestSharp;
using Sdkgen.Client;
using Sdkgen.Client.Exception;

namespace Fusio.SDK;

public class ConsumerIdentityTag : TagAbstract {
    public ConsumerIdentityTag(RestClient httpClient, Parser parser): base(httpClient, parser)
    {
    }


    public async Task<Passthru> Redirect(string identity)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("identity", identity);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/consumer/identity/:identity/redirect", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<Passthru>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 400)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            throw new CommonMessageException(data);
        }

        if (statusCode == 500)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            throw new CommonMessageException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    public async Task<Passthru> Exchange(string identity)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("identity", identity);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/consumer/identity/:identity/exchange", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<Passthru>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 400)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            throw new CommonMessageException(data);
        }

        if (statusCode == 500)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            throw new CommonMessageException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    public async Task<ConsumerIdentityCollection> GetAll(int appId, string appKey)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();
        queryParams.Add("appId", appId);
        queryParams.Add("appKey", appKey);

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/consumer/identity", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<ConsumerIdentityCollection>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 400)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            throw new CommonMessageException(data);
        }

        if (statusCode == 500)
        {
            var data = this.Parser.Parse<CommonMessage>(response.Content);

            throw new CommonMessageException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }


}
